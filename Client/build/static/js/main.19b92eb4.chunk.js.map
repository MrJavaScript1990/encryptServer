{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg","cryptography.js"],"names":["pages","style","onClick","setToken","token","div","background","width","height","axios","post","id","then","res","data","catch","err","alert","message","toString","slice","eData","JSON","stringify","decryptObject","AnimationHandler","useState","index","set","useCallback","a","state","transitions","useTransition","p","from","opacity","transform","enter","leave","align","className","map","item","props","key","Page","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","algorithm","PreSharedSecret","Buffer","IV","string","tempString","text","encryptedText","decipher","crypto","createDecipheriv","decrypted","update","concat","final","decrypt","parse"],"mappings":"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","file":"static/js/main.19b92eb4.chunk.js","sourcesContent":["import React, {useCallback, useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios';\nimport {decryptObject} from \"./cryptography\";\nimport {animated, useTransition} from \"react-spring\";\n\n\nconst pages = [\n    ({ style ,onClick,token,setToken}) => <animated.div style={{ ...style, background: 'lightpink' }}>\n        <button style={{width: 400, height: 50}} onClick={() => {\n            axios.post('/api/getEncryptedData', {id: 'a'}).then((res) => {\n                    setToken(res.data.data)\n                    onClick();\n                }\n            ).catch((err) => alert(err.message));\n        }}>\n            <h3>Get Hash A</h3>\n        </button>\n        <button style={{width: 400, height: 50}} onClick={() => {\n            axios.post('/api/getEncryptedData', {id: 'b'}).then((res) => {\n                    setToken(res.data.data)\n                    onClick();\n                }\n            ).catch((err) => alert(err.message));\n        }}>\n            <h3>Get Hash B</h3>\n        </button>\n        <button style={{width: 400, height: 50}} onClick={() => {\n            axios.post('/api/getEncryptedData', {id: 'c'}).then((res) => {\n                    setToken(res.data.data)\n                    onClick();\n                }\n            ).catch((err) => alert(err.message));\n        }}>\n            <h3>Get Hash C</h3>\n        </button>\n    </animated.div>,\n    ({ style ,token,onClick}) => <animated.div style={{ ...style, background: 'lightblue' }}>\n        <p>{token.toString().slice(0,20)+'...'}</p>\n        <button\n                style={{width: 400, height: 50}} onClick={() => {\n            axios.post('/api/sendEncryptedData', {eData: token}).then((res) => {\n                    // alert(JSON.stringify(res.data));\n                    // console.log(res.data);\n                }\n            ).catch((err) => alert(err.message));\n        }}>\n            <h3>Send Hash A To Server To Decrypt</h3>\n        </button>\n        <button\n                style={{width: 400, height: 50}} onClick={() => {\n\n            alert(JSON.stringify(decryptObject(token)));\n        }}>\n            <h3>Decrypt Hash in client</h3>\n        </button>\n        <button\n            style={{width: 400, height: 50}} onClick={() => {\n            onClick(-1)\n        }}>\n            <h3>{'<-GoBack'}</h3>\n        </button>\n    </animated.div>,\n    ({ style ,onClick}) => <animated.div style={{ ...style, background: 'lightgreen' }}>\n        No\n    </animated.div>,\n]\n\nfunction AnimationHandler() {\n    const [index, set] = useState(0);\n    const [token, setToken] = useState('');\n    const onClick = useCallback((a=1) => set(state => (state + a) % 3), []);\n    const transitions = useTransition(index, p => p, {\n        from: { opacity: 0, transform: 'translate3d(100%,0,0)' },\n        enter: { opacity: 1, transform: 'translate3d(0%,0,0)' },\n        leave: { opacity: 0, transform: 'translate3d(-50%,0,0)' },\n    });\n    return (\n        <div align=\"center\" style={{width:400,height:500}} className=\"simple-trans-main\" >\n            {transitions.map(({ item, props, key }) => {\n                const Page = pages[item];\n                return <Page key={key} style={props} onClick={onClick} token={token} setToken={setToken} />\n            })}\n        </div>\n    )\n}\n\n\n\n\n\n\nfunction App() {\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                <AnimationHandler/>\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import crypto from 'crypto';\r\nconst algorithm = 'aes-256-cbc';\r\n\r\nconst PreSharedSecret=Buffer.from('@dfdfddsljfdl44098vkvkhot!@#$$%#');\r\nconst IV = Buffer.from('3907fbc9a33f26d1');\r\n\r\n\r\n\r\nfunction encrypt(text) {\r\n    let cipher = crypto.createCipheriv(algorithm, PreSharedSecret, IV);\r\n    let encrypted = cipher.update(text);\r\n    encrypted = Buffer.concat([encrypted, cipher.final()]);\r\n    return encrypted.toString('hex');\r\n}\r\n\r\nfunction decrypt(text) {\r\n    let encryptedText = Buffer.from(text, 'hex');\r\n    let decipher = crypto.createDecipheriv(algorithm, PreSharedSecret, IV);\r\n    let decrypted = decipher.update(encryptedText);\r\n    decrypted = Buffer.concat([decrypted, decipher.final()]);\r\n    return decrypted.toString();\r\n}\r\n\r\nfunction encryptObject(obj){\r\n    let tempString=JSON.stringify(obj);\r\n    return encrypt(tempString);\r\n}\r\n\r\nfunction decryptObject(string){\r\n    let tempString=decrypt(string);\r\n    return JSON.parse(tempString)\r\n}\r\n\r\nexport {decryptObject,encryptObject}\r\n"],"sourceRoot":""}